// <auto-generated />
using System;
using ECommerce_be.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECommercebe.Persistence.Migrations
{
    [DbContext(typeof(ECommerce_beDbContext))]
    partial class ECommercebeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECommerce_be.Domain.Entities.Customer", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<DateTime>("CreatedTime")
                    .HasColumnType("timestamp without time zone");

                b.Property<DateTime>("DeletedTime")
                    .HasColumnType("timestamp without time zone");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("boolean");

                b.Property<bool>("IsEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("UpdatedTime")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.ToTable("Customers");
            });

            modelBuilder.Entity("ECommerce_be.Domain.Entities.Order", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Address")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("CreatedTime")
                    .HasColumnType("timestamp without time zone");

                b.Property<Guid>("CustomerId")
                    .HasColumnType("uuid");

                b.Property<string>("CustomerName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("DeletedTime")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("boolean");

                b.Property<bool>("IsEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("OrderNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("UpdatedTime")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.HasIndex("CustomerId");

                b.ToTable("Orders");
            });

            modelBuilder.Entity("ECommerce_be.Domain.Entities.Product", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<DateTime>("CreatedTime")
                    .HasColumnType("timestamp without time zone");

                b.Property<DateTime>("DeletedTime")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("boolean");

                b.Property<bool>("IsEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<float>("Price")
                    .HasColumnType("real");

                b.Property<int>("Stock")
                    .HasColumnType("integer");

                b.Property<DateTime>("UpdatedTime")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.ToTable("Products");
            });

            modelBuilder.Entity("OrderProduct", b =>
            {
                b.Property<Guid>("OrdersId")
                    .HasColumnType("uuid");

                b.Property<Guid>("ProductsId")
                    .HasColumnType("uuid");

                b.HasKey("OrdersId", "ProductsId");

                b.HasIndex("ProductsId");

                b.ToTable("OrderProduct");
            });

            modelBuilder.Entity("ECommerce_be.Domain.Entities.Order", b =>
            {
                b.HasOne("ECommerce_be.Domain.Entities.Customer", "Customer")
                    .WithMany("Orders")
                    .HasForeignKey("CustomerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Customer");
            });

            modelBuilder.Entity("OrderProduct", b =>
            {
                b.HasOne("ECommerce_be.Domain.Entities.Order", null)
                    .WithMany()
                    .HasForeignKey("OrdersId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("ECommerce_be.Domain.Entities.Product", null)
                    .WithMany()
                    .HasForeignKey("ProductsId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("ECommerce_be.Domain.Entities.Customer", b =>
            {
                b.Navigation("Orders");
            });
#pragma warning restore 612, 618
        }
    }
}
